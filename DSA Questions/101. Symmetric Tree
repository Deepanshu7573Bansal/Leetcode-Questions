/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        vector<int>v1;
        vector<int>v2;
        if(root==NULL){
            return true;
        }
        if(root->left==NULL && root->right==NULL){
            return true;
        }
        if(root->left!=NULL && root->right==NULL){
            return false;
        }
        if(root->left==NULL && root->right!=NULL){
            return false;
        }
        queue<TreeNode*>q1;
        queue<TreeNode*>q2;
        q1.push(root->left);
        v1.push_back(root->left->val);
        q2.push(root->right);
        v2.push_back(root->right->val);
        while(!q1.empty()){
            TreeNode* temp=q1.front();
            q1.pop();
            if(temp==NULL){
                v1.push_back(-101);
                continue;
            }
            v1.push_back(temp->val);
            if(temp->left==NULL && temp->right==NULL){
                v1.push_back(-101);
                continue;
            }
            if(temp->left==NULL){
                q1.push(NULL);
            }
            if(temp->left!=NULL){
                q1.push(temp->left);
            }
            if(temp->right==NULL){
                q1.push(NULL);
            }
            if(temp->right!=NULL){
                q1.push(temp->right);
            }
        }
        while(!q2.empty()){
            TreeNode* temp=q2.front();
            q2.pop();
            if(temp==NULL){
                v2.push_back(-101);
                continue;
            }
            v2.push_back(temp->val);
            if(temp->left==NULL && temp->right==NULL){
                v2.push_back(-101);
                continue;
            }
            if(temp->right==NULL){
                q2.push(NULL);
            }
            if(temp->right!=NULL){
                q2.push(temp->right);
            }
            if(temp->left==NULL){
                q2.push(NULL);
            }
            if(temp->left!=NULL){
                q2.push(temp->left);
            }
        }

        if(v1.size()!=v2.size()){
            return false;
        }

        for(int i=0;i<v1.size();i++){
            if(v1[i]!=v2[i]){
                return false;
            }
        }
        return true;
    }
};
