/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        vector<int>result;
        vector<int>v;
        int odd=0;
        int flag=0;

        queue<TreeNode*>q;
        q.push(root);
        q.push(NULL);
        while(!q.empty()){
            TreeNode* temp=q.front();
            q.pop();
            if(temp==NULL){
                if(flag==1){
                    break;
                }
                if(odd%2==0){
                    for(int i=0;i<v.size();i++){
                        result.push_back(v[i]);
                    }
                }else{
                    for(int i=v.size()-1;i>=0;i--){
                        result.push_back(v[i]);
                    }
                }
                flag=1;
                odd++;
                q.push(NULL);
                v.clear();
            }else{
                flag=0;
                v.push_back(temp->val);
                if(temp->left!=NULL){
                    q.push(temp->left);
                }
                if(temp->right!=NULL){
                    q.push(temp->right);
                }
            }
        }

        while(!q.empty()){
            q.pop();
        }
        q.push(root);
        q.push(NULL);
        int index=0;
        while(!q.empty()){
            TreeNode* temp=q.front();
            q.pop();
            if(temp==NULL){
                if(flag==1){
                    break;
                }
                flag=1;
                q.push(NULL);
            }else{
                flag=0;
                temp->val=result[index];
                index++;
                if(temp->left!=NULL){
                    q.push(temp->left);
                }
                if(temp->right!=NULL){
                    q.push(temp->right);
                }
            }
        }
        return root;
    }
};
