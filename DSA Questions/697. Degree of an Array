class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        // if(nums.size()==1 || (nums[0]==2 && nums[1]==1)){
        //     return 1;
        // }

        vector<int>v1;
        vector<int>v;
        vector<int>v2;
        int count=0,index,num;

        for(int i=0;i<nums.size();i++){
            v1.push_back(nums[i]);
        }

        for(int i=0;i<v1.size();i++){
            if(v1[i]!=-99){
                count=0;
                for(int j=i;j<v1.size();j++){
                    if(v1[i]==v1[j]){
                        count++;
                        num=v1[i];
                        v1[j]=-99;
                        v1[i]=num;
                    }
                }
                v1[i]=-99;
                v.push_back(count);
            }
        }

        sort(v.begin(),v.end());
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=-99){
                count=0;
                for(int j=i;j<nums.size();j++){
                    if(nums[i]==nums[j]){
                        index=j;
                        count++;
                        num=nums[i];
                        nums[j]=-99;
                        nums[i]=num;
                    }
                }
                if(v[v.size()-1]==count){
                    v2.push_back((index-i)+1);
                }
                nums[i]=-99;
            }
        }

        // if(v.size()==0){
        //     return 2;
        // }
        sort(v2.begin(),v2.end());
        return v2[0];
    }
};
